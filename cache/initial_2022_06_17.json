{
	"wp_lms_bondarenko_courses": [
		{"id": 1, "name": "Курс по основам языка c# версии 10", "image": "http://wordpress/wp-content/uploads/2022/06/csharp.png", "description": "{\"time\":1655147555041,\"blocks\":[{\"id\":\"qrL4Pqilcg\",\"type\":\"paragraph\",\"data\":{\"text\":\"На сегодняшний момент язык программирования C# один из самых мощных, быстро развивающихся и востребованных языков в ИТ-отрасли. На нем пишут: десктоп, веб, мобильные приложения и многое другое.\"}}],\"version\":\"2.24.3\"}"},
		{"id": 2, "name": "Курс по основам Unity", "image": "http://wordpress/wp-content/uploads/2022/06/unity.jpg", "description": "{\"time\":1655159091256,\"blocks\":[{\"id\":\"zpgxe4SrsO\",\"type\":\"paragraph\",\"data\":{\"text\":\"Unity — это гораздо больше, чем лучшая в мире платформа разработки в реальном времени; это еще и надежная экосистема, созданная для достижения вашего успеха.\"}}],\"version\":\"2.24.3\"}"},
		{"id": 3, "name": "Курс по основам ASP NET CORE", "image": "http://wordpress/wp-content/uploads/2022/06/aspnetcore.png", "description": "{\"time\":1655159126062,\"blocks\":[{\"id\":\"0w1Ec-WxPU\",\"type\":\"paragraph\",\"data\":{\"text\":\"ASP.NET Core является кроссплатформенной, высокопроизводительной средой с открытым исходным кодом для создания современных облачных приложений, подключенных к Интернету.\"}}],\"version\":\"2.24.3\"}"}
	],
	"wp_lms_bondarenko_courses_in_user": [
		{"id": 2, "user_id": 1, "course_id": 1},
		{"id": 6, "user_id": 1, "course_id": 2},
		{"id": 3, "user_id": 3, "course_id": 1},
		{"id": 4, "user_id": 4, "course_id": 1},
		{"id": 5, "user_id": 5, "course_id": 1}
	],
	"wp_lms_bondarenko_user_results": [
		{"id": 1, "user_id": 1, "course_id": 1},
		{"id": 5, "user_id": 1, "course_id": 2},
		{"id": 2, "user_id": 3, "course_id": 1},
		{"id": 3, "user_id": 4, "course_id": 1},
		{"id": 4, "user_id": 5, "course_id": 1}
	],
	"wp_lms_bondarenko_modules": [
		{"id": 1, "name": "Основы. Часть 1", "description": "{\"time\":1655158944256,\"blocks\":[{\"id\":\"qwMybSuwb8\",\"type\":\"paragraph\",\"data\":{\"text\":\"Модуль затрагивает самые основные аспекты языка и программирования в целом. В нем вы познакомитесь с <b>переменными, константами и литералами</b>.\"}}],\"version\":\"2.24.3\"}"},
		{"id": 2, "name": "Основы. Часть 2", "description": "{\"time\":1655158927366,\"blocks\":[{\"id\":\"9SSQ4_DUF3\",\"type\":\"paragraph\",\"data\":{\"text\":\"Модуль затрагивает самые основные аспекты языка и программирования в целом. В нем вы познакомитесь с <b>типами данных</b>.\"}}],\"version\":\"2.24.3\"}"},
		{"id": 3, "name": "Основы. Часть 3", "description": "{\"time\":1655158967334,\"blocks\":[{\"id\":\"sKp2FaF-PD\",\"type\":\"paragraph\",\"data\":{\"text\":\"Модуль затрагивает самые основные аспекты языка и программирования в целом. В нем вы познакомитесь с <b>консольным вводом-выводом</b>.\"}}],\"version\":\"2.24.3\"}"},
		{"id": 4, "name": "Основы. Часть 4", "description": "{\"time\":1655158996142,\"blocks\":[{\"id\":\"zcH1A6MI7p\",\"type\":\"paragraph\",\"data\":{\"text\":\"Модуль затрагивает самые основные аспекты языка и программирования в целом. В нем вы познакомитесь с <b>арифметическими операциями.</b>\"}}],\"version\":\"2.24.3\"}"},
		{"id": 5, "name": "Основы. Часть 5", "description": "{\"time\":1655169369335,\"blocks\":[{\"id\":\"-pjpCgoTNp\",\"type\":\"paragraph\",\"data\":{\"text\":\"Модуль затрагивает самые основные аспекты языка и программирования в целом. В нем вы познакомитесь с <b>операцией присвоения.</b>\"}}],\"version\":\"2.24.3\"}"},
		{"id": 6, "name": "Тестовый модуль", "description": "{\"time\":1655243291,\"blocks\":[],\"version\":\"2.24.3\"}"}
	],
	"wp_lms_bondarenko_modules_in_courses": [
		{"id": 1, "course_id": 1, "module_id": 1},
		{"id": 2, "course_id": 1, "module_id": 2},
		{"id": 3, "course_id": 1, "module_id": 3},
		{"id": 4, "course_id": 1, "module_id": 4},
		{"id": 5, "course_id": 1, "module_id": 5},
		{"id": 6, "course_id": 2, "module_id": 6}
	],
	"wp_lms_bondarenko_themes": [
		{"id": 5, "name": "Арифметические операции"},
		{"id": 4, "name": "Консольный ввод-вывод"},
		{"id": 2, "name": "Литералы"},
		{"id": 6, "name": "Операции присваивания"},
		{"id": 1, "name": "Переменные и константы"},
		{"id": 7, "name": "Тестовая тема"},
		{"id": 3, "name": "Типы данных"}
	],
	"wp_lms_bondarenko_themes_in_modules": [
		{"id": 2, "theme_id": 1, "module_id": 1},
		{"id": 1, "theme_id": 2, "module_id": 1},
		{"id": 3, "theme_id": 3, "module_id": 2},
		{"id": 4, "theme_id": 4, "module_id": 3},
		{"id": 5, "theme_id": 5, "module_id": 4},
		{"id": 6, "theme_id": 6, "module_id": 5},
		{"id": 7, "theme_id": 7, "module_id": 6}
	],
	"wp_lms_bondarenko_tests": [
		{"id": 1, "name": "Переменные", "header": "{\"time\":1655160503694,\"blocks\":[{\"id\":\"QW2rqAMRMX\",\"type\":\"paragraph\",\"data\":{\"text\":\"Ответьте на некоторые вопросы касаемые переменных:\"}}],\"version\":\"2.24.3\"}"},
		{"id": 2, "name": "Константы", "header": "{\"time\":1655160726628,\"blocks\":[{\"id\":\"zhi7Dyud2j\",\"type\":\"paragraph\",\"data\":{\"text\":\"Ответьте на вопрос по константам\"}}],\"version\":\"2.24.3\"}"},
		{"id": 3, "name": "Литералы", "header": "{\"time\":1655161249815,\"blocks\":[{\"id\":\"GpRdho6PUL\",\"type\":\"paragraph\",\"data\":{\"text\":\"Ответьте на вопросы касающиеся типов данных\"}}],\"version\":\"2.24.3\"}"},
		{"id": 4, "name": "Типы данных", "header": "{\"time\":1655159193,\"blocks\":[],\"version\":\"2.24.3\"}"},
		{"id": 5, "name": "Консольный ввод-вывод", "header": "{\"time\":1655159193,\"blocks\":[],\"version\":\"2.24.3\"}"},
		{"id": 6, "name": "Операции присвоения", "header": "{\"time\":1655159193,\"blocks\":[],\"version\":\"2.24.3\"}"},
		{"id": 7, "name": "Арифметические операции", "header": "{\"time\":1655159193,\"blocks\":[],\"version\":\"2.24.3\"}"},
		{"id": 8, "name": "Начальное тестирование", "header": "{\"time\":1655481132694,\"blocks\":[{\"id\":\"NgQbP7qRXD\",\"type\":\"paragraph\",\"data\":{\"text\":\"Ответьте на начальные вопросы\"}}],\"version\":\"2.24.3\"}"}
	],
	"wp_lms_bondarenko_tests_in_themes": [
		{"id": 2, "test_id": 1, "theme_id": 1},
		{"id": 3, "test_id": 2, "theme_id": 1},
		{"id": 5, "test_id": 3, "theme_id": 2},
		{"id": 1, "test_id": 4, "theme_id": 3},
		{"id": 6, "test_id": 5, "theme_id": 4},
		{"id": 7, "test_id": 7, "theme_id": 5},
		{"id": 4, "test_id": 6, "theme_id": 6}
	],
	"wp_lms_bondarenko_tests_in_courses": [
		{"id": 1, "test_id": 8, "course_id": 1}
	],
	"wp_lms_bondarenko_questions": [
		{"id": 1, "name": "Объявление переменной", "text": "{\"time\":1655160539597,\"blocks\":[{\"id\":\"lEXfxe0mAq\",\"type\":\"paragraph\",\"data\":{\"text\":\"Укажите правильное объявление переменной\"}}],\"version\":\"2.24.3\"}"},
		{"id": 2, "name": "Объявление констант", "text": "{\"time\":1655183976315,\"blocks\":[{\"id\":\"5sitFlOZzV\",\"type\":\"paragraph\",\"data\":{\"text\":\"Выберите правильное объявление константы\"}}],\"version\":\"2.24.3\"}"},
		{"id": 3, "name": "Какого типа данных литерал", "text": "{\"time\":1655161019991,\"blocks\":[{\"id\":\"CxDHzOEWyg\",\"type\":\"paragraph\",\"data\":{\"text\":\"Какого типа данных следующий литерал:\"}},{\"id\":\"de_j2YClId\",\"type\":\"code\",\"data\":{\"code\":\"3.14d\"}}],\"version\":\"2.24.3\"}"},
		{"id": 4, "name": "Существующие типы данных", "text": "{\"time\":1655161310097,\"blocks\":[{\"id\":\"YchCF3UVxj\",\"type\":\"paragraph\",\"data\":{\"text\":\"Выберите существующие типы данных:\"}}],\"version\":\"2.24.3\"}"},
		{"id": 5, "name": "Функция для вывода на консоль", "text": "{\"time\":1655161617447,\"blocks\":[{\"id\":\"KA-MOQIiIH\",\"type\":\"paragraph\",\"data\":{\"text\":\"Ответьте на вопросы касаемые консольного ввода-вывода\"}}],\"version\":\"2.24.3\"}"},
		{"id": 8, "name": "Чему будет равно значение переменной", "text": "{\"time\":1655309116246,\"blocks\":[{\"id\":\"cOmO1DoShj\",\"type\":\"paragraph\",\"data\":{\"text\":\"Чему будет равно значение переменной\"}},{\"id\":\"oUCLMRT_dK\",\"type\":\"code\",\"data\":{\"code\":\"int x = 5;\"}}],\"version\":\"2.24.3\"}"},
		{"id": 9, "name": "Операция сложения", "text": "{\"time\":1655309200643,\"blocks\":[{\"id\":\"8XsTQI4z8o\",\"type\":\"paragraph\",\"data\":{\"text\":\"Чему будет равно значение переменной\"}},{\"id\":\"lYzDlAKZBQ\",\"type\":\"code\",\"data\":{\"code\":\"int x = 5;\\nx++;\\nx += 4;\"}}],\"version\":\"2.24.3\"}"},
		{"id": 10, "name": "Объявление констант 2", "text": "{\"time\":1655322218894,\"blocks\":[{\"id\":\"lEUY-EHMhB\",\"type\":\"paragraph\",\"data\":{\"text\":\"Сработает ли следующий код:\"}},{\"id\":\"ojaZziJ8AW\",\"type\":\"code\",\"data\":{\"code\":\"const string name = \\\"Tom\\\";\\nname = \\\"Bob\\\";\"}}],\"version\":\"2.24.3\"}"},
		{"id": 11, "name": "Начальное тестирование. Выбор кода", "text": "{\"time\":1655391786358,\"blocks\":[{\"id\":\"OKaaR13nhE\",\"type\":\"paragraph\",\"data\":{\"text\":\"Какой код проверит переменную \\\"a\\\" на тип данных \\\"int\\\"\"}}],\"version\":\"2.24.3\"}"}
	],
	"wp_lms_bondarenko_questions_in_test": [
		{"id": 1, "test_id": 1, "question_id": 1},
		{"id": 2, "test_id": 2, "question_id": 2},
		{"id": 3, "test_id": 3, "question_id": 3},
		{"id": 4, "test_id": 4, "question_id": 4},
		{"id": 5, "test_id": 5, "question_id": 5},
		{"id": 8, "test_id": 6, "question_id": 8},
		{"id": 9, "test_id": 7, "question_id": 9},
		{"id": 10, "test_id": 2, "question_id": 10},
		{"id": 11, "test_id": 8, "question_id": 11}
	],
	"wp_lms_bondarenko_questions_in_user_results": [
		{"id": 63, "question_id": 11, "user_result_id": 1}
	],
	"wp_lms_bondarenko_options": [
		{"id": 1, "value": "{\"time\":1655160552112,\"blocks\":[{\"id\":\"vPZms1mTwZ\",\"type\":\"code\",\"data\":{\"code\":\"let x = 3;\"}}],\"version\":\"2.24.3\"}"},
		{"id": 2, "value": "{\"time\":1655160572957,\"blocks\":[{\"id\":\"UnNUy7FboI\",\"type\":\"code\",\"data\":{\"code\":\"var _4 = 5;\"}}],\"version\":\"2.24.3\"}"},
		{"id": 3, "value": "{\"time\":1655160591207,\"blocks\":[{\"id\":\"a57_Qur2i1\",\"type\":\"code\",\"data\":{\"code\":\"int x = 5;\"}}],\"version\":\"2.24.3\"}"},
		{"id": 4, "value": "{\"time\":1655160782086,\"blocks\":[{\"id\":\"fv7XnKScVD\",\"type\":\"code\",\"data\":{\"code\":\"const string Name;\"}}],\"version\":\"2.24.3\"}"},
		{"id": 6, "value": "{\"time\":1655161051475,\"blocks\":[{\"id\":\"fvuBLgAIJ3\",\"type\":\"code\",\"data\":{\"code\":\"double\"}}],\"version\":\"2.24.3\"}"},
		{"id": 7, "value": "{\"time\":1655161061198,\"blocks\":[{\"id\":\"U_3XOo8ptA\",\"type\":\"code\",\"data\":{\"code\":\"int\"}}],\"version\":\"2.24.3\"}"},
		{"id": 8, "value": "{\"time\":1655161069234,\"blocks\":[{\"id\":\"4JOJKQS7BG\",\"type\":\"code\",\"data\":{\"code\":\"float\"}}],\"version\":\"2.24.3\"}"},
		{"id": 9, "value": "{\"time\":1655161341877,\"blocks\":[{\"id\":\"b3tx7rNjGH\",\"type\":\"paragraph\",\"data\":{\"text\":\"variable\"}}],\"version\":\"2.24.3\"}"},
		{"id": 10, "value": "{\"time\":1655161354458,\"blocks\":[{\"id\":\"lltEbzhjFe\",\"type\":\"paragraph\",\"data\":{\"text\":\"string\"}}],\"version\":\"2.24.3\"}"},
		{"id": 11, "value": "{\"time\":1655161363989,\"blocks\":[{\"id\":\"TIQWgDXfMH\",\"type\":\"paragraph\",\"data\":{\"text\":\"int\"}}],\"version\":\"2.24.3\"}"},
		{"id": 12, "value": "{\"time\":1655161531578,\"blocks\":[{\"id\":\"xoV1rPuZs8\",\"type\":\"paragraph\",\"data\":{\"text\":\"Print()\"}}],\"version\":\"2.24.3\"}"},
		{"id": 13, "value": "{\"time\":1655161549477,\"blocks\":[{\"id\":\"LDsifG0wvl\",\"type\":\"paragraph\",\"data\":{\"text\":\"Console.WriteLine()\"}}],\"version\":\"2.24.3\"}"},
		{"id": 14, "value": "{\"time\":1655161583053,\"blocks\":[{\"id\":\"X2Y8uKHfQR\",\"type\":\"paragraph\",\"data\":{\"text\":\"Line()\"}}],\"version\":\"2.24.3\"}"},
		{"id": 15, "value": "{\"time\":1655162215904,\"blocks\":[{\"id\":\"Emw5Wt9nDJ\",\"type\":\"paragraph\",\"data\":{\"text\":\"5\"}}],\"version\":\"2.24.3\"}"},
		{"id": 16, "value": "{\"time\":1655162428892,\"blocks\":[{\"id\":\"CHsadpVURj\",\"type\":\"paragraph\",\"data\":{\"text\":\"10\"}}],\"version\":\"2.24.3\"}"},
		{"id": 17, "value": "{\"time\":1655240386293,\"blocks\":[{\"id\":\"W1mJ1uZzLq\",\"type\":\"code\",\"data\":{\"code\":\"const string NAME = \\\"Tom\\\";\"}}],\"version\":\"2.24.3\"}"},
		{"id": 18, "value": "{\"time\":1655322273660,\"blocks\":[{\"id\":\"bxUo8p1efB\",\"type\":\"paragraph\",\"data\":{\"text\":\"Да\"}}],\"version\":\"2.24.3\"}"},
		{"id": 19, "value": "{\"time\":1655322281704,\"blocks\":[{\"id\":\"r8gmzMp6oI\",\"type\":\"paragraph\",\"data\":{\"text\":\"Нет\"}}],\"version\":\"2.24.3\"}"},
		{"id": 20, "value": "{\"time\":1655392084258,\"blocks\":[{\"id\":\"A5g_oiAKLu\",\"type\":\"code\",\"data\":{\"code\":\"let int a = 5;\\nlet bool aIsInt = a.GetType() == typeof(int);\"}}],\"version\":\"2.24.3\"}"},
		{"id": 21, "value": "{\"time\":1655392126653,\"blocks\":[{\"id\":\"gtnu3E-kHk\",\"type\":\"code\",\"data\":{\"code\":\"int a = 5;\\nbool aIsInt = a.GetType() == typeof(int);\"}}],\"version\":\"2.24.3\"}"},
		{"id": 22, "value": "{\"time\":1655392159320,\"blocks\":[{\"id\":\"RSOb61tIGT\",\"type\":\"code\",\"data\":{\"code\":\"int a = 5;\\nbool aIsInt = typeof(a) == typeof(int);\"}}],\"version\":\"2.24.3\"}"}
	],
	"wp_lms_bondarenko_options_in_questions": [
		{"id": 1, "option_id": 1, "question_id": 1, "is_right_answer": 0},
		{"id": 2, "option_id": 2, "question_id": 1, "is_right_answer": 0},
		{"id": 3, "option_id": 3, "question_id": 1, "is_right_answer": 1},
		{"id": 4, "option_id": 4, "question_id": 2, "is_right_answer": 0},
		{"id": 17, "option_id": 17, "question_id": 2, "is_right_answer": 1},
		{"id": 6, "option_id": 6, "question_id": 3, "is_right_answer": 1},
		{"id": 7, "option_id": 7, "question_id": 3, "is_right_answer": 0},
		{"id": 8, "option_id": 8, "question_id": 3, "is_right_answer": 0},
		{"id": 9, "option_id": 9, "question_id": 4, "is_right_answer": 0},
		{"id": 10, "option_id": 10, "question_id": 4, "is_right_answer": 1},
		{"id": 11, "option_id": 11, "question_id": 4, "is_right_answer": 1},
		{"id": 12, "option_id": 12, "question_id": 5, "is_right_answer": 0},
		{"id": 13, "option_id": 13, "question_id": 5, "is_right_answer": 1},
		{"id": 14, "option_id": 14, "question_id": 5, "is_right_answer": 0},
		{"id": 18, "option_id": 15, "question_id": 8, "is_right_answer": 1},
		{"id": 19, "option_id": 16, "question_id": 9, "is_right_answer": 1},
		{"id": 20, "option_id": 18, "question_id": 10, "is_right_answer": 0},
		{"id": 21, "option_id": 19, "question_id": 10, "is_right_answer": 1},
		{"id": 22, "option_id": 20, "question_id": 11, "is_right_answer": 0},
		{"id": 23, "option_id": 21, "question_id": 11, "is_right_answer": 1},
		{"id": 24, "option_id": 22, "question_id": 11, "is_right_answer": 0}
	],
	"wp_lms_bondarenko_competences": [
		{"id": 4, "name": "Арифметические операции"},
		{"id": 6, "name": "Консольный ввод-вывод"},
		{"id": 2, "name": "Константы"},
		{"id": 7, "name": "Литералы"},
		{"id": 5, "name": "Операция присвоения"},
		{"id": 1, "name": "Переменные"},
		{"id": 3, "name": "Типы данных"}
	],
	"wp_lms_bondarenko_competences_in_questions": [
		{"id": 7, "question_id": 1, "competence_id": 1},
		{"id": 1, "question_id": 2, "competence_id": 2},
		{"id": 2, "question_id": 3, "competence_id": 7},
		{"id": 3, "question_id": 4, "competence_id": 3},
		{"id": 4, "question_id": 5, "competence_id": 6},
		{"id": 8, "question_id": 8, "competence_id": 5},
		{"id": 9, "question_id": 9, "competence_id": 4},
		{"id": 10, "question_id": 11, "competence_id": 1},
		{"id": 11, "question_id": 11, "competence_id": 3}
	],
	"wp_lms_bondarenko_competences_in_themes": [
		{"id": 2, "theme_id": 2, "competence_id": 1},
		{"id": 1, "theme_id": 2, "competence_id": 2},
		{"id": 12, "theme_id": 3, "competence_id": 1},
		{"id": 10, "theme_id": 3, "competence_id": 2},
		{"id": 11, "theme_id": 3, "competence_id": 7},
		{"id": 5, "theme_id": 4, "competence_id": 1},
		{"id": 3, "theme_id": 4, "competence_id": 2},
		{"id": 6, "theme_id": 4, "competence_id": 3},
		{"id": 4, "theme_id": 4, "competence_id": 7},
		{"id": 8, "theme_id": 5, "competence_id": 1},
		{"id": 7, "theme_id": 5, "competence_id": 2},
		{"id": 9, "theme_id": 5, "competence_id": 3},
		{"id": 16, "theme_id": 5, "competence_id": 7},
		{"id": 15, "theme_id": 6, "competence_id": 1},
		{"id": 17, "theme_id": 6, "competence_id": 3}
	],
	"wp_lms_bondarenko_theories": [
		{"id": 7, "name": "Переменные", "content": "{\"time\":1655159610388,\"blocks\":[{\"id\":\"pUk9z9GktP\",\"type\":\"paragraph\",\"data\":{\"text\":\"Для хранения данных в программе применяются&nbsp;переменные. Переменная представляет именнованную область памяти, в которой хранится значение определенного типа. Переменная имеет тип, имя и значение. Тип определяет, какого рода информацию может хранить переменная.\"}},{\"id\":\"I-SzftDEZz\",\"type\":\"paragraph\",\"data\":{\"text\":\"Перед использованием любую переменную надо определить. Синтаксис определения переменной выглядит следующим образом:\"}},{\"id\":\"Aq9mWmgPSx\",\"type\":\"code\",\"data\":{\"code\":\"тип имя_переменной;\"}},{\"id\":\"khUDsC9jSv\",\"type\":\"paragraph\",\"data\":{\"text\":\"Вначале идет тип переменной, потом ее имя. В качестве имени переменной может выступать любое произвольное название, которое удовлетворяет следующим требованиям:\"}},{\"id\":\"uexJ2tcllb\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"имя может содержать любые цифры, буквы и символ подчеркивания, при этом первый символ в имени должен быть буквой или символом подчеркивания\",\"в имени не должно быть знаков пунктуации и пробелов\",\"имя не может быть ключевым словом языка C#. Таких слов не так много, и при работе в Visual Studio среда разработки подсвечивает ключевые слова синим цветом.\"]}},{\"id\":\"s3xp_NFqQa\",\"type\":\"paragraph\",\"data\":{\"text\":\"Хотя имя переменой может быть любым, но следует давать переменным описательные имена, которые будут говорить об их предназначении.\"}},{\"id\":\"5MQz8aIc8L\",\"type\":\"paragraph\",\"data\":{\"text\":\"Например, определим простейшую переменную:\"}},{\"id\":\"g2cU-_Ra3P\",\"type\":\"code\",\"data\":{\"code\":\"string name;\"}},{\"id\":\"LkudWSl8n2\",\"type\":\"paragraph\",\"data\":{\"text\":\"В данном случае определена переменная name, которая имеет тип string. то есть переменная представляет строку. Поскольку определение переменной представляет собой инструкцию, то после него ставится точка с запятой.\"}}],\"version\":\"2.24.3\"}"},
		{"id": 10, "name": "Типы данных", "content": "{\"time\":1655243229705,\"blocks\":[{\"id\":\"1aeCFy46dp\",\"type\":\"paragraph\",\"data\":{\"text\":\"Как и во многих языках программирования, в C# есть своя система типов данных, которая используется для создания переменных. Тип данных определяет внутреннее представление данных, множество значений, которые может принимать объект, а также допустимые действия, которые можно применять над объектом.\"}},{\"id\":\"smzIsGI-jZ\",\"type\":\"paragraph\",\"data\":{\"text\":\"В языке C# есть следующие базовые типы данных:\"}},{\"id\":\"wdYF7AczKn\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"bool: хранит значение true или false (логические литералы). Представлен системным типом System.Boolean\"]}},{\"id\":\"0LX_gbhXmh\",\"type\":\"code\",\"data\":{\"code\":\"bool alive = true;\\nbool isDead = false;\"}},{\"id\":\"CmH3CEQfIq\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"byte: хранит целое число от 0 до 255 и занимает 1 байт. Представлен системным типом System.Byte\"]}},{\"id\":\"S18ZWUBeKu\",\"type\":\"code\",\"data\":{\"code\":\"byte bit1 = 1;\\nbyte bit2 = 102;\"}},{\"id\":\"MKL0oDnGch\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"sbyte: хранит целое число от -128 до 127 и занимает 1 байт. Представлен системным типом System.SByte\"]}},{\"id\":\"gMOSIuBArJ\",\"type\":\"code\",\"data\":{\"code\":\"sbyte bit1 = -101;\\nsbyte bit2 = 102;\"}},{\"id\":\"3qzsKa2Xzd\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"short: хранит целое число от -32768 до 32767 и занимает 2 байта. Представлен системным типом System.Int16\"]}},{\"id\":\"BCnTYwSBup\",\"type\":\"code\",\"data\":{\"code\":\"short n1 = 1;\\nshort n2 = 102;\"}},{\"id\":\"EX3T67F_Nf\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"ushort: хранит целое число от 0 до 65535 и занимает 2 байта. Представлен системным типом System.UInt16\"]}},{\"id\":\"Un4YEWIg9z\",\"type\":\"code\",\"data\":{\"code\":\"ushort n1 = 1;\\nushort n2 = 102;\"}},{\"id\":\"v-dyd378AQ\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"int: хранит целое число от -2147483648 до 2147483647 и занимает 4 байта. Представлен системным типом System.Int32. Все целочисленные литералы по умолчанию представляют значения типа int:\"]}},{\"id\":\"VASZiT_byt\",\"type\":\"code\",\"data\":{\"code\":\"int a = 10;\\nint b = 0b101;  // бинарная форма b =5\\nint c = 0xFF;   // шестнадцатеричная форма c = 255\"}},{\"id\":\"cGWIWbQkTp\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"uint: хранит целое число от 0 до 4294967295 и занимает 4 байта. Представлен системным типом System.UInt32\"]}},{\"id\":\"Y1e_HPH9xU\",\"type\":\"code\",\"data\":{\"code\":\"uint a = 10;\\nuint b = 0b101;\\nuint c = 0xFF;\"}},{\"id\":\"Otc4eqpsJH\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"long: хранит целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт. Представлен системным типом System.Int64\"]}},{\"id\":\"54_02fZZGs\",\"type\":\"code\",\"data\":{\"code\":\"long a = -10;\\nlong b = 0b101;\\nlong c = 0xFF;\"}},{\"id\":\"vpNak57yv4\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"ulong: хранит целое число от 0 до 18 446 744 073 709 551 615 и занимает 8 байт. Представлен системным типом System.UInt64\"]}},{\"id\":\"hZWQdn2KzX\",\"type\":\"code\",\"data\":{\"code\":\"ulong a = 10;\\nulong b = 0b101;\\nulong c = 0xFF;\"}},{\"id\":\"d-JIevb2gZ\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"float: хранит число с плавающей точкой от&nbsp;-3.4*1038&nbsp;до&nbsp;3.4*1038&nbsp;и занимает 4 байта. Представлен системным типом&nbsp;System.Single\"]}},{\"id\":\"X5_dXN0LfO\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"double: хранит число с плавающей точкой от&nbsp;±5.0*10-324&nbsp;до&nbsp;±1.7*10308&nbsp;и занимает 8 байта. Представлен системным типом&nbsp;System.Double<br>\",\"decimal: хранит десятичное дробное число. Если употребляется без десятичной запятой, имеет значение от ±1.0*10-28&nbsp;до ±7.9228*1028, может хранить 28 знаков после запятой и занимает 16 байт. Представлен системным типом&nbsp;System.Decimal\",\"char: хранит одиночный символ в кодировке Unicode и занимает 2 байта. Представлен системным типом&nbsp;System.Char. Этому типу соответствуют символьные литералы\",\"string: хранит набор символов Unicode. Представлен системным типом System.String. Этому типу соответствуют строковые литералы.<br>\"]}},{\"id\":\"DtvCK_WmMG\",\"type\":\"code\",\"data\":{\"code\":\"string hello = \\\"Hello\\\";\\nstring word = \\\"world\\\";\"}},{\"id\":\"eAtQ9lHkK5\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"object: может хранить значение любого типа данных и занимает 4 байта на 32-разрядной платформе и 8 байт на 64-разрядной платформе. Представлен системным типом System.Object, который является базовым для всех других типов и классов .NET.\"]}},{\"id\":\"tkRQF5qi1t\",\"type\":\"code\",\"data\":{\"code\":\"object a = 22;\\nobject b = 3.14;\\nobject c = \\\"hello code\\\";\"}},{\"id\":\"CrbA2bhCAO\",\"type\":\"paragraph\",\"data\":{\"text\":\"Например, определим несколько переменных разных типов и выведем их значения на консоль:\"}},{\"id\":\"alCyQ1q1YW\",\"type\":\"code\",\"data\":{\"code\":\"string name = \\\"Tom\\\";\\nint age = 33;\\nbool isEmployed = false;\\ndouble weight = 78.65;\\n \\nConsole.WriteLine($\\\"Имя: {name}\\\");\\nConsole.WriteLine($\\\"Возраст: {age}\\\");\\nConsole.WriteLine($\\\"Вес: {weight}\\\");\\nConsole.WriteLine($\\\"Работает: {isEmployed}\\\");\"}}],\"version\":\"2.24.3\"}"},
		{"id": 14, "name": "Литералы", "content": "{\"time\":1655241839653,\"blocks\":[{\"id\":\"XZw7By5V9M\",\"type\":\"paragraph\",\"data\":{\"text\":\"Литералы представляют неизменяемые значения (иногда их еще называют константами). Литералы можно передавать переменным в качестве значения. Литералы бывают логическими, целочисленными, вещественными, символьными и строчными. И отдельный литерал представляет ключевое слово null.\"}},{\"id\":\"69vzOi-BMS\",\"type\":\"header\",\"data\":{\"text\":\"Логические литералы\",\"level\":3}},{\"id\":\"kAgj2uMHJo\",\"type\":\"paragraph\",\"data\":{\"text\":\"Есть две логических константы - <b>true </b>(истина) и <b>false </b>(ложь):\"}},{\"id\":\"mTziNgqgtQ\",\"type\":\"code\",\"data\":{\"code\":\"Console.WriteLine(true);\\nConsole.WriteLine(false);\"}},{\"id\":\"ORpnhXmjpN\",\"type\":\"header\",\"data\":{\"text\":\"Целочисленные литералы\",\"level\":3}},{\"id\":\"CdQSTuP9tx\",\"type\":\"paragraph\",\"data\":{\"text\":\"Целочисленные литералы представляют положительные и отрицательные целые числа, например, 1, 2, 3, 4, -7, -109. Целочисленные литералы могут быть выражены в десятичной, шестнадцатеричной и двоичной форме.\"}},{\"id\":\"kYf5YdBnXx\",\"type\":\"paragraph\",\"data\":{\"text\":\"С целыми числами в десятичной форме все должно быть понятно, так как они используются в повседневной жизни:\"}},{\"id\":\"rTNuBPmKGU\",\"type\":\"code\",\"data\":{\"code\":\"Console.WriteLine(-11);\\nConsole.WriteLine(5);\\nConsole.WriteLine(505);\"}},{\"id\":\"vPkeye5eZn\",\"type\":\"paragraph\",\"data\":{\"text\":\"Числа в двоичной форме предваряются символами 0b, после которых идет набор из нулей и единиц:\"}},{\"id\":\"dkJvcw42iU\",\"type\":\"code\",\"data\":{\"code\":\"Console.WriteLine(0b11);        // 3\\nConsole.WriteLine(0b1011);      // 11\\nConsole.WriteLine(0b100001);    // 33\"}},{\"id\":\"sdUgZt5yki\",\"type\":\"paragraph\",\"data\":{\"text\":\"Для записи числа в шестнадцатеричной форме применяются символы 0x, после которых идет набор символов от 0 до 9 и от A до F, которые собственно представляют число:\"}},{\"id\":\"bQqnUrvYx0\",\"type\":\"code\",\"data\":{\"code\":\"Console.WriteLine(0x0A);    // 10\\nConsole.WriteLine(0xFF);    // 255\\nConsole.WriteLine(0xA1);    // 161\"}},{\"id\":\"47TGzwvRvg\",\"type\":\"header\",\"data\":{\"text\":\"Вещественные литералы\",\"level\":3}},{\"id\":\"EgeiqHjoJP\",\"type\":\"paragraph\",\"data\":{\"text\":\"Вещественные литералы представляют дробные числа. Этот тип литералов имеет две формы. Первая форма - вещественные числа с фиксированной запятой, при которой дробную часть отделяется от целой части точкой. Например:\"}},{\"id\":\"YoesY-usSj\",\"type\":\"code\",\"data\":{\"code\":\"3.14\\n100.001\\n-0.38\"}},{\"id\":\"wI8TfPK1rt\",\"type\":\"paragraph\",\"data\":{\"text\":\"Также вещественные литералы могут определяться в экспоненциальной форме MEp, где M — мантисса, E - экспонента, которая фактически означает \\\"*10^\\\" (умножить на десять в степени), а p — порядок. Например:\"}},{\"id\":\"NeKpRUEin1\",\"type\":\"code\",\"data\":{\"code\":\"Console.WriteLine(3.2e3);   // по сути равно 3.2 * 10<sup>3</sup> = 3200\\nConsole.WriteLine(1.2E-1);  // равно 1.2 * 10<sup>-1</sup> = 0.12\"}}],\"version\":\"2.24.3\"}"},
		{"id": 15, "name": "Константы", "content": "{\"time\":1655241921635,\"blocks\":[{\"id\":\"V-WfUigA6X\",\"type\":\"paragraph\",\"data\":{\"text\":\"Отличительной особенностью переменных является то, что мы можем изменить их значение в процессе работы программы. Но, кроме того, в C# есть константы. Константа должна быть обязательно инициализирована при определении, и после определения значение константы не может быть изменено.\"}},{\"id\":\"RKjPL6yK8V\",\"type\":\"paragraph\",\"data\":{\"text\":\"Константы предназначены для описания таких значений, которые не должны изменяться в программе. Для определения констант используется ключевое слово const, которое указывается перед типом константы:\"}},{\"id\":\"VclH-9vVFL\",\"type\":\"code\",\"data\":{\"code\":\"const string NAME = \\\"Tom\\\";  // определяем константу\"}},{\"id\":\"f3klCYTcgA\",\"type\":\"paragraph\",\"data\":{\"text\":\"Так, в данном случае определена константа&nbsp;NAME, которая хранит строку \\\"Tom\\\". Нередко для название констант используется верхний регистр, но это не более чем условность.\"}},{\"id\":\"sIBayfsZ1C\",\"type\":\"paragraph\",\"data\":{\"text\":\"При использовании констант надо помнить, что объявить мы их можем только один раз и что к моменту компиляции они должны быть определены. Так, в следующем случае мы получим ошибку, так как константе не присвоено начальное значение:\"}},{\"id\":\"FBsq9SK_fg\",\"type\":\"code\",\"data\":{\"code\":\"const string NAME;  // ! Ошибка - константа NAME не инициализирована\"}},{\"id\":\"AGaWbltDwq\",\"type\":\"paragraph\",\"data\":{\"text\":\"Кроме того, мы ее не сможем изменим в процессе работы программы:\"}},{\"id\":\"ciHi21unBq\",\"type\":\"code\",\"data\":{\"code\":\"const string NAME = \\\"Tom\\\";  // определяем константу\\nNAME = \\\"Bob\\\";   // !Ошибка - у констаты нельзя изменить значение\"}},{\"id\":\"7rKPGKBZUm\",\"type\":\"paragraph\",\"data\":{\"text\":\"Таким образом, если нам надо хранить в программе некоторые данные, но их не следует изменить, они определяются в виде констант. Если же их можно изменять, то они определяются в виде переменных.\"}}],\"version\":\"2.24.3\"}"},
		{"id": 16, "name": "Операции присваивания", "content": "{\"time\":1655242132809,\"blocks\":[{\"id\":\"FVIK96mZPf\",\"type\":\"paragraph\",\"data\":{\"text\":\"Операции присвоения устанавливают значение. В операциях присвоения участвуют два операнда, причем левый операнд может представлять только модифицируемое именованное выражение, например, переменную\"}},{\"id\":\"rzG_3hvpPv\",\"type\":\"paragraph\",\"data\":{\"text\":\"Как и во многих других языках программирования, в C# имеется базовая операция присваивания&nbsp;=, которая присваивает значение правого операнда левому операнду:\"}},{\"id\":\"i5Zk-u0ZXR\",\"type\":\"code\",\"data\":{\"code\":\"int number = 23;\"}},{\"id\":\"GnrCHrZCF1\",\"type\":\"paragraph\",\"data\":{\"text\":\"Здесь переменной number присваивается число 23. Переменная number представляет левый операнд, которому присваивается значение правого операнда, то есть числа 23.\"}},{\"id\":\"xefH3-Efm3\",\"type\":\"paragraph\",\"data\":{\"text\":\"Также можно выполнять множественно присвоение сразу нескольких переменным одновременно:\"}},{\"id\":\"9xfXEpVLM3\",\"type\":\"code\",\"data\":{\"code\":\"int a, b, c;\\na = b = c = 34;\"}},{\"id\":\"S3vsZmWG9F\",\"type\":\"paragraph\",\"data\":{\"text\":\"Стоит отметить, что операции присвоения имеют низкий приоритет. И вначале будет вычисляться значение правого операнда и только потом будет идти присвоение этого значения левому операнду. Например:\"}},{\"id\":\"41jCaYPLI7\",\"type\":\"code\",\"data\":{\"code\":\"int a, b, c;\\na = b = c = 34 * 2 / 4; // 17\"}},{\"id\":\"Fw_PK_L6ju\",\"type\":\"paragraph\",\"data\":{\"text\":\"Сначала будет вычисляться выражение&nbsp;34 * 2 / 4, затем полученное значение будет присвоено переменным.\"}},{\"id\":\"wl_o69Vsl4\",\"type\":\"paragraph\",\"data\":{\"text\":\"Кроме базовой операции присвоения в C# есть еще ряд операций:\"}},{\"id\":\"BLRnP6q5jm\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"+=: присваивание после сложения. Присваивает левому операнду сумму левого и правого операндов: выражение&nbsp;A += B&nbsp;равнозначно выражению&nbsp;A = A + B\",\"-=: присваивание после вычитания. Присваивает левому операнду разность левого и правого операндов:&nbsp;A -= B&nbsp;эквивалентно&nbsp;A = A - B\",\"*=: присваивание после умножения. Присваивает левому операнду произведение левого и правого операндов:&nbsp;A *= B&nbsp;эквивалентно&nbsp;A = A * B\",\"/=: присваивание после деления. Присваивает левому операнду частное левого и правого операндов:&nbsp;A /= B&nbsp;эквивалентно&nbsp;A = A / B\",\"%=: присваивание после деления по модулю. Присваивает левому операнду остаток от целочисленного деления левого операнда на правый:&nbsp;A %= B&nbsp;эквивалентно&nbsp;A = A % B\",\"&amp;=: присваивание после поразрядной конъюнкции. Присваивает левому операнду результат поразрядной конъюнкции его битового представления с битовым представлением правого операнда:&nbsp;A &amp;= B&nbsp;эквивалентно&nbsp;A = A &amp; B\",\"|=: присваивание после поразрядной дизъюнкции. Присваивает левому операнду результат поразрядной дизъюнкции его битового представления с битовым представлением правого операнда:&nbsp;A |= B&nbsp;эквивалентно&nbsp;A = A | B\",\"^=: присваивание после операции исключающего ИЛИ. Присваивает левому операнду результат операции исключающего ИЛИ его битового представления с битовым представлением правого операнда:&nbsp;A ^= B&nbsp;эквивалентно&nbsp;A = A ^ B\",\"&lt;&lt;=: присваивание после сдвига разрядов влево. Присваивает левому операнду результат сдвига его битового представления влево на определенное количество разрядов, равное значению правого операнда:&nbsp;A &lt;&lt;= B&nbsp;эквивалентно&nbsp;A = A &lt;&lt; B\",\"&gt;&gt;=: присваивание после сдвига разрядов вправо. Присваивает левому операнду результат сдвига его битового представления вправо на определенное количество разрядов, равное значению правого операнда:&nbsp;A &gt;&gt;= B&nbsp;эквивалентно&nbsp;A = A &gt;&gt; B\"]}},{\"id\":\"_9TyWiwCuG\",\"type\":\"paragraph\",\"data\":{\"text\":\"Применение операций присвоения:\"}},{\"id\":\"0eUH-gZsGM\",\"type\":\"code\",\"data\":{\"code\":\"int a = 10;\\na += 10;        // 20\\na -= 4;         // 16\\na *= 2;         // 32\\na /= 8;         // 4\\na <<= 4;      // 64\\na >>= 2;      // 16\"}}],\"version\":\"2.24.3\"}"},
		{"id": 17, "name": "Арифметические операции", "content": "{\"time\":1655242729451,\"blocks\":[{\"id\":\"0gYdO4YNe5\",\"type\":\"paragraph\",\"data\":{\"text\":\"В C# используется большинство операций, которые применяются и в других языках программирования. Операции представляют определенные действия над операндами - участниками операции. В качестве операнда может выступать переменной или какое-либо значение (например, число). Операции бывают унарными (выполняются над одним операндом), бинарными - над двумя операндами и тернарными - выполняются над тремя операндами. Рассмотрим все виды операций.\"}},{\"id\":\"acJcFqdiIK\",\"type\":\"paragraph\",\"data\":{\"text\":\"Бинарные арифметические операции:\"}},{\"id\":\"JxIQ9OjdZC\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"Операция сложения двух чисел:\"]}},{\"id\":\"AYO8sym_Yf\",\"type\":\"code\",\"data\":{\"code\":\"int x = 10;\\nint z = x + 12; // 22\"}},{\"id\":\"fLkJkYCCSQ\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"Операция вычитания двух чисел:\"]}},{\"id\":\"lxfu6ts-cN\",\"type\":\"code\",\"data\":{\"code\":\"int x = 10;\\nint z = x - 6; // 4\"}},{\"id\":\"_IP0kTkQ6N\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"Операция умножения двух чисел:\"]}},{\"id\":\"5VGEAcXFGV\",\"type\":\"code\",\"data\":{\"code\":\"int x = 10;\\nint z = x * 5; // 50\"}},{\"id\":\"adGSrbJwHx\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"операция деления двух чисел:\"]}},{\"id\":\"m1KsJNNtEI\",\"type\":\"code\",\"data\":{\"code\":\"int x = 10;\\nint z = x / 5; // 2\\n\\ndouble a = 10;\\ndouble b = 3;\\ndouble c = a / b; // 3.33333333\"}},{\"id\":\"pckg1HpT4X\",\"type\":\"paragraph\",\"data\":{\"text\":\"При делении стоит учитывать, что если оба операнда представляют целые числа, то результат также будет округляться до целого числа:\"}},{\"id\":\"sGJOMJvjaA\",\"type\":\"code\",\"data\":{\"code\":\"double z = 10 /  4; //результат равен 2\"}},{\"id\":\"vcOAqjZSdE\",\"type\":\"paragraph\",\"data\":{\"text\":\"Несмотря на то, что результат операции в итоге помещается в переменную типа double, которая позволяет сохранить дробную часть, но в самой операции участвуют два литерала, которые по умолчанию рассматриваются как объекты int, то есть целые числа, и результат то же будет целочисленный.\"}},{\"id\":\"9-mZhu1ow-\",\"type\":\"paragraph\",\"data\":{\"text\":\"Для выхода из этой ситуации необходимо определять литералы или переменные, участвующие в операции, именно как типы double или float:\"}},{\"id\":\"bWFYpuFwj4\",\"type\":\"code\",\"data\":{\"code\":\"double z = 10.0 /  4.0; //результат равен 2.5\"}},{\"id\":\"cTh5o-CXNZ\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"Операция получение остатка от целочисленного деления двух чисел:\"]}},{\"id\":\"axvzsfqlKt\",\"type\":\"code\",\"data\":{\"code\":\"double x = 10.0;\\ndouble z = x % 4.0; //результат равен 2\"}},{\"id\":\"ZYorI2_6G-\",\"type\":\"paragraph\",\"data\":{\"text\":\"Также есть ряд унарных операций, в которых принимает участие один операнд:\"}},{\"id\":\"wua0cdwJ1S\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"Операция инкремента. Инкремент бывает префиксным:&nbsp;++x&nbsp;- сначала значение переменной x увеличивается на 1, а потом ее значение возвращается в качестве результата операции.\"]}},{\"id\":\"kOQRnGUOEU\",\"type\":\"paragraph\",\"data\":{\"text\":\"И также существует постфиксный инкремент:&nbsp;x++&nbsp;- сначала значение переменной x возвращается в качестве результата операции, а затем к нему прибавляется 1.\"}},{\"id\":\"zmtXhHm_af\",\"type\":\"code\",\"data\":{\"code\":\"int x1 = 5;\\nint z1 = ++x1; // z1=6; x1=6\\nConsole.WriteLine($\\\"{x1} - {z1}\\\");\\n \\nint x2 = 5;\\nint z2 = x2++; // z2=5; x2=6\\nConsole.WriteLine($\\\"{x2} - {z2}\\\");\"}},{\"id\":\"4kDHUJLNVH\",\"type\":\"list\",\"data\":{\"style\":\"unordered\",\"items\":[\"Операция декремента или уменьшения значения на единицу. Также существует префиксная форма декремента (--x) и постфиксная (x--).\"]}},{\"id\":\"tBDpQAx3yD\",\"type\":\"code\",\"data\":{\"code\":\"int x1 = 5;\\nint z1 = --x1; // z1=4; x1=4\\nConsole.WriteLine($\\\"{x1} - {z1}\\\");\\n \\nint x2 = 5;\\nint z2 = x2--; // z2=5; x2=4\\nConsole.WriteLine($\\\"{x2} - {z2}\\\");\"}}],\"version\":\"2.24.3\"}"},
		{"id": 18, "name": "Консольный ввод-вывод", "content": "{\"time\":1655242931723,\"blocks\":[{\"id\":\"gPrrAqDIg5\",\"type\":\"paragraph\",\"data\":{\"text\":\"Для вывода информации на консоль мы уже использовали встроенный метод Console.WriteLine. То есть, если мы хотим вывести некоторую информацию на консоль, то нам надо передать ее в метод Console.WriteLine:\"}},{\"id\":\"_ZmJ_40iGW\",\"type\":\"code\",\"data\":{\"code\":\"string hello = \\\"Привет мир\\\";\\nConsole.WriteLine(hello);\\nConsole.WriteLine(\\\"Добро пожаловать в C#!\\\");\\nConsole.WriteLine(\\\"Пока мир...\\\");\\nConsole.WriteLine(24.5);\"}},{\"id\":\"k6KFIqm7_m\",\"type\":\"paragraph\",\"data\":{\"text\":\"Консольный вывод:\"}},{\"id\":\"AYbCl9fiTx\",\"type\":\"code\",\"data\":{\"code\":\"Привет мир!\\nДобро пожаловать в C#!\\nПока мир...\\n24,5\"}},{\"id\":\"iqWtmTnBc4\",\"type\":\"paragraph\",\"data\":{\"text\":\"Нередко возникает необходимость вывести на консоль в одной строке значения сразу нескольких переменных. В этом случае мы можем использовать прием, который называется интерполяцией:\"}},{\"id\":\"VAS0pv-4om\",\"type\":\"code\",\"data\":{\"code\":\"string name = \\\"Tom\\\";\\nint age = 34;\\ndouble height = 1.7;\\nConsole.WriteLine($\\\"Имя: {name}  Возраст: {age}  Рост: {height}м\\\");\"}},{\"id\":\"TqjAq5zAv2\",\"type\":\"paragraph\",\"data\":{\"text\":\"Для встраивания отдельных значений в выводимую на консоль строку используются фигурные скобки, в которые заключается встраиваемое значение. Это можем значение переменной ({name}) или более сложное выражение (например, операция сложения&nbsp;{4 + 7}). А перед всей строкой ставится знак доллара $.\"}},{\"id\":\"MAhwG5R1kg\",\"type\":\"paragraph\",\"data\":{\"text\":\"При выводе на консоль вместо помещенных в фигурные скобки выражений будут выводиться их значения:\"}},{\"id\":\"100FrjuVu2\",\"type\":\"code\",\"data\":{\"code\":\"Имя: Tom  Возраст: 34  Рост: 1,7м\"}},{\"id\":\"Klisq7X5tH\",\"type\":\"paragraph\",\"data\":{\"text\":\"Есть другой способ вывода на консоль сразу нескольких значений:\"}},{\"id\":\"tlh4BhtqF8\",\"type\":\"code\",\"data\":{\"code\":\"string name = \\\"Tom\\\";\\nint age = 34;\\ndouble height = 1.7;\\nConsole.WriteLine(\\\"Имя: {0}  Возраст: {2}  Рост: {1}м\\\", name, height, age);\"}},{\"id\":\"1EVMZxalLR\",\"type\":\"paragraph\",\"data\":{\"text\":\"Здесь мы видим, что строка в&nbsp;Console.WriteLine&nbsp;содержит некие числа в фигурных скобках: {0}, {1}, {2}. Это плейсхолдеры, вместо которых при выводе строки на консоль будут подставляться некоторые значения. Подставляемые значения указываются после строки через запятую.\"}},{\"id\":\"r7qKTmGmO5\",\"type\":\"paragraph\",\"data\":{\"text\":\"При этом важен порядок подобных плейсхолдеров. Например, в данном случае после строки первой указана переменная name, потом height и потом age. Поэтому значение переменной name будет всавляться вместо первого плейсхолдера - {0} (нумерация начинается с нуля), height - вместо {1}, а age - вместо {2}. Поэтому в итоге пи выводе на консоль строка.\"}},{\"id\":\"SEUapDsp17\",\"type\":\"code\",\"data\":{\"code\":\"\\\"Имя: {0}  Возраст: {2}  Рост: {1}м\\\"\"}},{\"id\":\"tGDzhf1Ljn\",\"type\":\"paragraph\",\"data\":{\"text\":\"будет заменена на\"}},{\"id\":\"dyZj4ivrsJ\",\"type\":\"code\",\"data\":{\"code\":\"\\\"Имя: Tom  Возраст: 34  Рост: 1,7м\\\"\"}}],\"version\":\"2.24.3\"}"},
		{"id": 19, "name": "Тестовая теория", "content": "{\"time\":1655243291,\"blocks\":[],\"version\":\"2.24.3\"}"}
	],
	"wp_lms_bondarenko_theories_in_themes": [
		{"id": 10, "theme_id": 1, "theory_id": 7},
		{"id": 18, "theme_id": 1, "theory_id": 15},
		{"id": 16, "theme_id": 2, "theory_id": 14},
		{"id": 12, "theme_id": 3, "theory_id": 10},
		{"id": 15, "theme_id": 4, "theory_id": 18},
		{"id": 14, "theme_id": 5, "theory_id": 17},
		{"id": 17, "theme_id": 6, "theory_id": 16},
		{"id": 19, "theme_id": 7, "theory_id": 19}
	],
	"wp_lms_bondarenko_theories_in_user_results": [
		
	],
	"wp_lms_bondarenko_concepts": [
		{"id": 1, "name": "Переменная", "weight": 1.0},
		{"id": 2, "name": "Константа", "weight": 2.0},
		{"id": 3, "name": "Литерал", "weight": 3.0},
		{"id": 5, "name": "Метод вывода на консоль", "weight": 5.0},
		{"id": 6, "name": "Операция присвоения", "weight": 4.0},
		{"id": 7, "name": "Тип данных", "weight": 7.0},
		{"id": 8, "name": "Арифметическая операция", "weight": 6.0}
	],
	"wp_lms_bondarenko_concepts_in_theories": [
		{"id": 1, "theory_id": 7, "concept_id": 1},
		{"id": 2, "theory_id": 10, "concept_id": 7},
		{"id": 3, "theory_id": 14, "concept_id": 3},
		{"id": 4, "theory_id": 15, "concept_id": 2},
		{"id": 5, "theory_id": 16, "concept_id": 6},
		{"id": 6, "theory_id": 17, "concept_id": 8},
		{"id": 7, "theory_id": 18, "concept_id": 5}
	],
	"wp_lms_bondarenko_concepts_in_competences": [
		{"id": 6, "competence_id": 1, "required_concept_id": 1},
		{"id": 3, "competence_id": 2, "required_concept_id": 2},
		{"id": 7, "competence_id": 3, "required_concept_id": 7},
		{"id": 1, "competence_id": 4, "required_concept_id": 8},
		{"id": 5, "competence_id": 5, "required_concept_id": 6},
		{"id": 2, "competence_id": 6, "required_concept_id": 5},
		{"id": 4, "competence_id": 7, "required_concept_id": 3}
	],
	"wp_lms_bondarenko_concepts_in_themes": [
		
	]
}